.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.13.
.TH ZON "1" "February 2022" "zon 1.2.1~alfa" "User Commands"
.SH NAME
zon \- zon [Options...] -- scriptable time output about sun rise and set in UTC
.SH SYNOPSIS
.B zon
[\fI\,OPTION\/\fR...]
.SH DESCRIPTION
This is the README for zon

This program will print the time for the next sun rise or sun set in your location. It's purpose is to schedule jobs to be executed at e.g. sun rise. This could be used for swithing on and off your garden lights, solar panels, security alarms etc.

This command line tool could be called in cron or as a timestamp to a systemd-timer at e.g. 1:00 AM to delay the actual execution of a job to sun rise or sun set on the same date. You can delay by using the at command or the systemd-run command (see examples). However, this method might not work in regions with higher latitudes than about 65 degrees. 

In regions above 65 or below -65 degrees latitude the previous scheduling method might not work, because in those regions nights or days can be very short or even non existent periodically. In those cases you can construct a chain of invocations of this tool, because it produces the __next__ sun rise/set, which can be on any later calendar date. Just make sure that your sun-rise job eventually schedules the next invocation of the sun rise job (see examples).

You have to supply your location on earth by latitude and longitude by giving the parameter '-l' or by ~/.config/zon.conf or /etc/zon.conf, see --help instructions below. 

Output is always in UTC, because that is convenient for scripting and unambigious for scheduling. Default output has an ISO time stamp format, eg 2021-02-28T01:00+00:00. For display purposes the regular date command can convert this to whatever desired timezone and formatting, e.g. by 'date -d <isotimestamp>'. See examples.

This program will give you the next rise and/or set time if your system-time is accurate enough. You can however specify any other reference date/time, by supplying a time to zon's  '-d' parameter in ISO format. This ISO format can easily be generated with the 'date -Im' command and may specify a time zone other than UTC. See examples.

With the '-@' parameter output is usable for scheduling with the 'at' command by issuing the 'utc' timezone indicator. Be warned however, that this 'utc' is not always respected due to a bug in some of the previous versions of the 'at' command. A workaround is to set the TZ environment variable to 'utc' before invoking the at command. For example: echo myjob.sh | TZ=utc at `zon -@' will run your job at the next sun rise. Check the resulting schedule with the 'TZ=utc atq' command. 

With the '-y' parameter the output is usable for ad hoc/transient scheduling with the 'systemd-run' command, because it will contain the "UTC" timezone indicator. Be reminded that systemd-run --on-calendar is a recent addition and may not work for you.
 
The '-v' option will add a descriptive label. A repeat of this option will print some more or less useful extra data as well.

Please note: It would be straightforward to include the current local timezone in the output, however i.m.o. this makes no sense because the timezone is subject to future daylight saving time changes rendering the printed time unreliable for scheduling. The 'date' command can handle the changing timezones appropiately if required.
.PP
zon [Options...] \fB\-\-\fR scriptable time output about sun rise and set in UTC
.IP
Options to select what to display
.TP
\fB\-r\fR, \fB\-\-rise\fR
Produce the next start/rise time relative to
current or provided time
.TP
\fB\-s\fR, \fB\-\-set\fR
Produce the next end/set time relative to current
or provided time
.TP
\fB\-c\fR, \fB\-\-current\fR
Whether sun is up "+" or down "\-". Default if no
display type selected.
.TP
\fB\-m\fR, \fB\-\-mid\fR
Produce time exactly between the next rise and set
times, i.e. deep midnight or high noon
.IP
Options to specify when and where on earth
.TP
\fB\-d\fR, \fB\-\-date\fR=\fI\,iso\-time\/\fR
YYYY\-MM\-DDTHH:MM+ZZ[:]zz Calculate for specified
iso\-formatted time. Defaults to current system
time. Specify "date <date syntax>" to parse by
invoking the date command
.TP
\fB\-l\fR, \fB\-\-location=\fR+DDMM+DDDMM or +DDMMSS+DDDMMSS or degrees,degrees (with N,S,+
or \- sings) Calculate for latitude (+N/\-S) and
longitude (+E\-W) in Degrees, Minutes and Seconds.
Overrides configuration files \fI\,/etc/zon.conf\/\fP and
~/.config/zon.conf
.IP
Options to format the output. Defaults to iso\-format
.TP
\-@, \fB\-\-at\fR
Format output as date usable by the at command (in
UTC), HH:MM YYYY\-MM\-DD
.TP
\fB\-f\fR, \fB\-\-format=\fR%H %M %m etc
Format output yourself with %H:%M %Y\-%m%d %Z
etcetera, see strftime() documentation
.TP
\fB\-y\fR, \fB\-\-systemd\fR
Format output as required for systemd\-run,
YYYY\-MM\-DD HH:MM UTC
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Produce a label or if repeated give all base and
calculated data, including date and location
.IP
Options to select the kind of twighlight
.TP
\fB\-\-sun\fR
Default: Produce start, ending and duration of
visibility of top of sun above horizon, i.e.
sunrise and sunset. Both atmospheric refraction
(\fB\-35\fR/60 degree) and rim of the apparent size of
the solar disk are accounted for.
.TP
\fB\-\-civil\fR
Produce data about civil twighlight, starting when
centre of sun is 6 degrees below horizon
.TP
\fB\-\-nautical\fR
Produce data about nautical twighlight, starting
when centre of sun is 12 degrees below horizon
.TP
\fB\-\-astronomical\fR
Produce data about astronomical twighlight,
starting when centre of sun is 18 degrees below
horizon
.TP
\fB\-\-angle\fR=\fI\,degrees\/\fR
Specify your own rise/set angle of the centre of
the sun to the horizon
.TP
\fB\-\-rim\fR
Specify to compensate angle for the upper rim of
the sun (i.e. the radius of the apparent solar
disk). Like at sun rise/set. Use after \fB\-\-angle\fR
.TP
\-?, \fB\-\-help\fR
Give this help list
.TP
\fB\-\-usage\fR
Give a short usage message
.TP
\fB\-V\fR, \fB\-\-version\fR
Print program version
.PP
Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.
.SH FILES
 /$HOME/.config/zon.conf 

 /etc/zon.conf

first line should contain default latitude en longitude +DDMM[SS]+DDDMM[SS] exactly as below without spaces:
 
 location=+501010+0113030 OR 
 location=+5010+01130
.SH EXAMPLES
Example to schedule a job at sun rise with the at command:
 export risetime=$(./zon -r@) ; 
 echo myscheduledjob.sh | TZ=UTC at $risetime ; 
 echo "The job is scheduled for UTC $risetime"

 export risetime=$(./zon -r)
 echo myscheduledjob.sh | TZ=UTC at $(date -d $risetime "+%H:%M %Y-%m-%d")  ; 
 echo "The job is scheduled for local time $(date -d $risetime) 

Example for systemd-run command:
 export risetime=$(./zon -ry);
 systemd-run --on-calendar="$risetime" myscheduledjob.sh;
 echo "The job is scheduled for $risetime"

systemd-run --on-calendar="$(zon --rise --systemd)" touch /tmp/sunrise.time

systemd-run --on-calendar="$(zon -ry)" touch /tmp/sunrise.time

Example to give sunrise time somewhere else in a certain timezone, on a future date after DST switch:
 zon$ TZ=CET date -d $( zon -rd $(date -Im -d "now + 5 month") -l +490800+1851356 );
 Sun Aug 15 18:26:00 CEST 2021


HOW TO BUILD: 
This requires the 'autotools' toolchain. With this prequisite fulfilled you can build from source tar-ball with:
 mkdir workdir ;
 tar -xvf source-ball.tar
 autoreconf --install # run this command only if ./configure complains about configure.in) ;
 ./configure ;
 make ; 
 make install ; 
.SH AUTHOR
Written by Michael Welter, 2021
.SH "REPORTING BUGS"
Report bugs to https://github.com/Aygath/zon.
.SH COPYRIGHT
GNU GENERAL PUBLIC LICENSE Version 3, 1991
